name: Build and Deploy

on:
  push:
    branches: [ main, dev ]

permissions:
  contents: read
  packages: write

env:
  PROD_PORT: 8443
  DEV_PORT: 8444

jobs:
  build-jar:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/
          retention-days: 1

  build-image-and-deploy:
    needs: build-jar
    runs-on: self-hosted
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: build/libs/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Tag and Profile
        id: vars
        run: |
          TAG=${GITHUB_REF##*/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          if [[ "$TAG" == "main" ]]; then
            echo "profile=prod" >> $GITHUB_OUTPUT
            echo "port=${{ env.PROD_PORT }}" >> $GITHUB_OUTPUT
          else
            echo "profile=dev" >> $GITHUB_OUTPUT
            echo "port=${{ env.DEV_PORT }}" >> $GITHUB_OUTPUT
          fi

          echo "repo_lc=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ steps.vars.outputs.repo_lc }}:${{ steps.vars.outputs.tag }}

      - name: Deploy Container
        run: |
          CONTAINER_NAME="${{ github.event.repository.name }}-${{ steps.vars.outputs.profile }}"
          OLD_CONTAINER_NAME="${CONTAINER_NAME}-old"
          
          # Cleanup old-old container
          docker stop $OLD_CONTAINER_NAME &>/dev/null && docker rm $OLD_CONTAINER_NAME &>/dev/null || echo "No previous 'old' container."
          
          # Stop current container first
          docker stop $CONTAINER_NAME &>/dev/null || echo "No running container to stop."
          docker rename $CONTAINER_NAME $OLD_CONTAINER_NAME &>/dev/null || echo "No container to rename."
          
          # Start new container
          docker run -d \
            -e SPRING_PROFILES_ACTIVE=${{ steps.vars.outputs.profile }} \
            -p ${{ steps.vars.outputs.port }}:8080 \
            --name $CONTAINER_NAME \
            ghcr.io/${{ steps.vars.outputs.repo_lc }}:${{ steps.vars.outputs.tag }}

      - name: Cleanup Dangling Docker images
        if: always()
        run: docker image prune -f